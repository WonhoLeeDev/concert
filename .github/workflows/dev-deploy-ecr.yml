# github actions에서 docker image 파일 빌드 후 ECR에 업로드. EC2에서 ECR로부터 image 파일 다운 후 컨테이너 실행.
name: deploy to EC2 with ECR

on:
  push:
    branches:
      - develop

jobs:
  Deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Github Repository에 올린 파일들 불러오기
        uses: actions/checkout@v4

      - name: JDK 17버전 설치
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: application.yml 파일 만들기
        run: echo "${{ secrets.APPLICATION_DEV_PROPERTIES }}" > ./src/main/resources/application.yml

      - name: gradlew 실행 권한추가, 테스트 및 빌드하기(테스트X)
        run: |
          chmod +x ./gradlew
          ./gradlew build -x test

      - name: AWS Resource에 접근할 수 있게 AWS credentials 설정 # ECR에 접근하기 위해 설정해야함
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ap-northeast-2
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: ECR에 로그인하기
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Github Actions에서 Docker 이미지 생성
        run: docker build -t concert-booking-server .

      - name: check docker image files
        run: docker image ls

      # ${{ steps.login-ecr.outputs.registry }} = ECR 주소값
      - name: Docker 이미지에 Tag 붙이기
        run: docker tag concert-booking-server ${{ steps.login-ecr.outputs.registry }}/concert-booking-server:latest

      - name: ECR에 Docker 이미지 Push하기
        run: docker push ${{ steps.login-ecr.outputs.registry }}/concert-booking-server:latest

      - name: SSH로 EC2에 접속하기
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script_stop: true
          script: |
            docker stop concert-booking-server || true
            docker rm concert-booking-server || true
            docker pull ${{ steps.login-ecr.outputs.registry }}/concert-booking-server:latest
            docker run -d --name concert-booking-server -p 8080:8080 ${{ steps.login-ecr.outputs.registry }}/concert-booking-server:latest